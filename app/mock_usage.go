// Automatically generated by MockGen. DO NOT EDIT!
// Source: usage.go

package app

import (
	gomock "github.com/golang/mock/gomock"
	command "github.com/turbinelabs/cli/command"
	tbnflag "github.com/turbinelabs/stdlib/flag"
)

// Mock of Usage interface
type MockUsage struct {
	ctrl     *gomock.Controller
	recorder *_MockUsageRecorder
}

// Recorder for MockUsage (not exported)
type _MockUsageRecorder struct {
	mock *MockUsage
}

func NewMockUsage(ctrl *gomock.Controller) *MockUsage {
	mock := &MockUsage{ctrl: ctrl}
	mock.recorder = &_MockUsageRecorder{mock}
	return mock
}

func (_m *MockUsage) EXPECT() *_MockUsageRecorder {
	return _m.recorder
}

func (_m *MockUsage) Global(cmds []*command.Cmd, flagsFromEnv tbnflag.FromEnv) {
	_m.ctrl.Call(_m, "Global", cmds, flagsFromEnv)
}

func (_mr *_MockUsageRecorder) Global(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Global", arg0, arg1)
}

func (_m *MockUsage) Command(cmd *command.Cmd, globalFlagsFromEnv tbnflag.FromEnv, cmdFlagsFromEnv tbnflag.FromEnv) {
	_m.ctrl.Call(_m, "Command", cmd, globalFlagsFromEnv, cmdFlagsFromEnv)
}

func (_mr *_MockUsageRecorder) Command(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Command", arg0, arg1, arg2)
}
