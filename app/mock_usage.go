/*
Copyright 2017 Turbine Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Automatically generated by MockGen. DO NOT EDIT!
// Source: usage.go

package app

import (
	gomock "github.com/golang/mock/gomock"
	command "github.com/turbinelabs/cli/command"
	flag "github.com/turbinelabs/nonstdlib/flag"
)

// Mock of Usage interface
type MockUsage struct {
	ctrl     *gomock.Controller
	recorder *_MockUsageRecorder
}

// Recorder for MockUsage (not exported)
type _MockUsageRecorder struct {
	mock *MockUsage
}

func NewMockUsage(ctrl *gomock.Controller) *MockUsage {
	mock := &MockUsage{ctrl: ctrl}
	mock.recorder = &_MockUsageRecorder{mock}
	return mock
}

func (_m *MockUsage) EXPECT() *_MockUsageRecorder {
	return _m.recorder
}

func (_m *MockUsage) Global(cmds []*command.Cmd, flagsFromEnv flag.FromEnv) {
	_m.ctrl.Call(_m, "Global", cmds, flagsFromEnv)
}

func (_mr *_MockUsageRecorder) Global(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Global", arg0, arg1)
}

func (_m *MockUsage) Command(cmd *command.Cmd, globalFlagsFromEnv flag.FromEnv, cmdFlagsFromEnv flag.FromEnv) {
	_m.ctrl.Call(_m, "Command", cmd, globalFlagsFromEnv, cmdFlagsFromEnv)
}

func (_mr *_MockUsageRecorder) Command(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Command", arg0, arg1, arg2)
}
